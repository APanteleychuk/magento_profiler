<?php

class Ecocode_Profiler_Tests_Dev_Model_Overwrite_VarienProfilerTest
    extends TestHelper
{
    public function setUp()
    {
        $this->checkCanRunTest();
        parent::setUp(); // TODO: Change the autogenerated stub
    }

    public function tearDown()
    {
        Varien_Profiler::disable();
    }

    public function testEnabledDisabled()
    {
        $reflectionProfiler = new ReflectionClass('Varien_Profiler');


        $properties = $reflectionProfiler->getStaticProperties();
        $this->assertFalse($properties['enabled']);

        Varien_Profiler::enable();
        $properties = $reflectionProfiler->getStaticProperties();
        $this->assertTrue($properties['enabled']);

        Varien_Profiler::disable();
        $properties = $reflectionProfiler->getStaticProperties();
        $this->assertFalse($properties['enabled']);
    }

    /**
     * @dataProvider getCategoryDataProvider
     *
     * @param $expected
     * @param $timerName
     */
    public function testGetCategory($expected, $timerName)
    {
        $reflectionGetCategory = new ReflectionMethod('Varien_Profiler', 'getCategory');
        $reflectionGetCategory->setAccessible(true);
        $this->assertEquals(
            $expected,
            $reflectionGetCategory->invoke(null, $timerName),
            sprintf('expected "%s" to be of category "%s"', $timerName, $expected)
        );
    }

    public function testStartStop()
    {
        Varien_Profiler::enable();
        Varien_Profiler::start('test-event');

        /** @var \Symfony\Component\Stopwatch\StopwatchEvent $event */
        $event = Varien_Profiler::fetch('test-event');

        $this->assertInstanceOf('\Symfony\Component\Stopwatch\StopwatchEvent', $event);
        $this->assertTrue($event->isStarted());

        Varien_Profiler::stop('test-event');
        $this->assertFalse($event->isStarted());


        Varien_Profiler::disable();
        Varien_Profiler::start('test-event');

        /** @var \Symfony\Component\Stopwatch\StopwatchEvent $event */
        $event = Varien_Profiler::fetch('test-event');

        $this->assertInstanceOf('\Symfony\Component\Stopwatch\StopwatchEvent', $event);
        $this->assertFalse($event->isStarted());

        Varien_Profiler::stop('test-event');

    }

    /**
     * @expectedException        LogicException
     * @expectedExceptionMessage Cant fetch event when the profiler is not started.
     */
    public function testFetchNotStarted()
    {
        $reflectionGetCategory = new ReflectionProperty('Varien_Profiler', 'stopWatch');
        $reflectionGetCategory->setAccessible(true);
        $reflectionGetCategory->setValue(null, null);

        $this->assertFalse(Varien_Profiler::fetch('xx'));
    }

    /**
     * @expectedException        LogicException
     * @expectedExceptionMessage Event "xx" is not known.
     */
    public function testFetchNonExistingEvent()
    {
        Varien_Profiler::reset();
        Varien_Profiler::fetch('xx');
    }


    public function testGetTimes()
    {
        $reflectionGetCategory = new ReflectionProperty('Varien_Profiler', 'stopWatch');
        $reflectionGetCategory->setAccessible(true);
        $reflectionGetCategory->setValue(null, null);

        $this->assertCount(0, Varien_Profiler::getTimers());

        Varien_Profiler::reset();
        $this->assertCount(1, Varien_Profiler::getTimers());
    }

    public function getCategoryDataProvider()
    {
        $this->checkCanRunTest();

        return [
            [Varien_Profiler::CATEGORY_SECTION, "mage::app::init::system_config"],
            [Varien_Profiler::CATEGORY_SECTION, "mage::dispatch::controller::action::predispatch::load_area::global::events"],
            [Varien_Profiler::CATEGORY_CORE, "mage::app::init::stores"],
            [Varien_Profiler::CATEGORY_CORE, "CORE::create_object_of::Mage_Checkout_Model_Session"],
            [Varien_Profiler::CATEGORY_EVENT, "OBSERVER: persistent_customer"],
            [Varien_Profiler::CATEGORY_EVENT, "DISPATCH EVENT:resource_get_tablename"],
            [Varien_Profiler::CATEGORY_LAYOUT, "BLOCK: product.info.addtocart.paypal.wrapper"],
            [Varien_Profiler::CATEGORY_LAYOUT, "frontend/base/default/template/page/1column.phtml"],
            [Varien_Profiler::CATEGORY_EAV, "EAV: Mage_Eav_Model_Config::getEntityType"],
            [Varien_Profiler::CATEGORY_EAV, "_LOAD_ATTRIBUTE_BY_CODE__"],
            [Varien_Profiler::CATEGORY_EAV, "__EAV_COLLECTION_AFTER_LOAD__"],
            [Varien_Profiler::CATEGORY_DEFAULT, "frontend/base/default/template/page/1column"],
        ];
    }

    protected function checkCanRunTest()
    {
        if (defined('Varien_Profiler::CATEGORY_SECTION') && @class_exists('Symfony\Component\Stopwatch\Stopwatch')) {
            return true;
        } else {
            $this->markTestSkipped('symfony stopwatch is not installed');
        }
    }
}
